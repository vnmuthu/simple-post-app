{"version":3,"sources":["services/registrationService.js","components/Login.js","services/postService.js","components/PostList.js","notfound.js","index.js"],"names":["userName","userEmail","axios","post","client_id","email","name","then","response","data","sl_token","catch","error","console","log","Login","props","userNameHandler","e","setState","target","value","userEmailHandler","state","isLoggedIn","tokenId","handleOnSubmit","bind","preventDefault","this","registrationService","doRegistration","responseToken","history","push","pathname","alert","className","onSubmit","type","onChange","React","Component","requestUrl","get","SenderTabTitle","activeSender","dataTab","onClick","data-tab","title","dataCount","SenderPostContent","style","dataTabSender","content","map","i","key","id","createdDate","postedDate","Date","postMonth","toLocaleString","month","postDay","getDate","padStart","postYear","getFullYear","postTime","getHours","getMinutes","getSeconds","formatPostDate","created_time","message","PostList","senderPostData","isPostsAvailable","sortOrder","searchSenderString","changeActiveSender","sortPostsByDate","handleSenderSearch","senderSearchText","trim","toLowerCase","length","findSender","senderTitle","item","tabTitle","tabPostCount","senderPostContent","tabContent","display","placeholder","ref","onKeyUp","location","postService","fetchPosts","posts","senderData","groupPostsBySenderTitle","slice","shift","refs","searchSender","focus","sortSenderGroup","senderGroup","reduce","accumulator","currentValue","from_name","Object","keys","sort","forEach","transformSenderData","formattedPostGroup","tabItemObj","postContent","fromName","senderName","filter","index","indexOf","userId","o","from_id","toString","entries","getAttribute","sortByOrder","list","group","a","b","searchText","sender","match","Notfound","routing","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6bd36be0.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass registrationService {\n    doRegistration(userName, userEmail) {\n        return axios.post('https://api.supermetrics.com/assignment/register', {\n            client_id: 'ju16a6m81mhid5ue1z3v2g0uh',\n            email: userEmail,\n            name: userName\n        })\n        .then((response) => {\n            const { sl_token } = response.data && response.data.data;\n            return sl_token;\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    }\n}\n\nexport default new registrationService();","import React from 'react';\nimport './Login.css'\nimport registrationService from '../services/registrationService'\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoggedIn: false,\n            tokenId: '',\n            userName: '',\n            userEmail: ''\n        };\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\n      }\n    \n      handleOnSubmit(e) {\n        e.preventDefault();\n        if (this.state.userName && this.state.userEmail) {\n            registrationService.doRegistration(this.state.userName, this.state.userEmail)\n            .then((responseToken) => {\n                this.setState({\n                    tokenId: responseToken,\n                    isLoggedIn: true\n                });\n\n                this.props.history.push({\n                    pathname: '/posts',\n                    state: {\n                        isLoggedIn: this.state.isLoggedIn,\n                        tokenId: this.state.tokenId\n                    }\n                })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        } else {\n            alert('Please Enter Name and Email');\n        }\n      }\n    \n      userNameHandler = (e) => {\n          this.setState({userName: e.target.value});\n      }\n    \n      userEmailHandler = (e) => {\n          this.setState({userEmail: e.target.value});\n      }\n\n    render() {\n        return (\n            <div className=\"login\">\n              <form onSubmit={this.handleOnSubmit}>\n                  <h2><span>SM</span>SuperMail</h2>\n                  <div className=\"name\">\n                  <div className=\"name-label\">Name</div>\n                  <input type=\"text\" name=\"username\" onChange={this.userNameHandler} />\n                  </div>\n                  <div className=\"email\">\n                  <div className=\"email-label\">Email</div>\n                  <input type=\"text\" name=\"useremail\" onChange={this.userEmailHandler} />\n                  </div>\n                  <input type=\"submit\" className=\"submit-btn\" value=\"GO\" />\n              </form>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import axios from 'axios';\n\nclass postService {\n    fetchPosts(tokenId) {\n        const requestUrl = 'https://api.supermetrics.com/assignment/posts?sl_token='+ tokenId;\n\n        return axios.get(requestUrl)\n        .then((response) => {\n            return response && response.data && response.data.data;\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    }\n}\n\nexport default new postService();","import React from 'react';\nimport './PostList.css';\nimport postService from '../services/postService';\n\nfunction SenderTabTitle(props) {\n    return (\n      props.activeSender === props.dataTab\n    ? <li onClick={props.onClick} className=\"tab-title active-tab\" data-tab={props.dataTab}>{props.title} <span className=\"totalPostCount\">{props.dataCount}</span></li>\n    : <li onClick={props.onClick} className=\"tab-title\" data-tab={props.dataTab}>{props.title} <span className=\"totalPostCount\">{props.dataCount}</span></li>\n    )\n}\n  \nfunction SenderPostContent(props) {\n    return (\n        <div className=\"post-items\" style={props.style} data-tab={props.dataTab}>\n            <div className=\"post-items-head\">\n                <span onClick={props.onClick} className=\"sort-icon\">&#8593;&#8595;</span>\n                <h1>{props.dataTabSender}</h1>\n            </div>\n            <ul>\n                {\n                    props.content.map((post, i) => <li key={post.id}>\n                        <div className=\"post-time\">{formatPostDate(post.created_time)}</div>\n                        <div className=\"post-message\">{post.message}</div>\n                    </li>\n                )}\n          </ul>\n        </div>\n    )\n}\n\nfunction formatPostDate(createdDate) {\n    const postedDate = new Date(createdDate);\n    const postMonth = postedDate.toLocaleString('default', { month: 'long' });\n    const postDay = `${postedDate.getDate()}`.padStart(2, '0');\n    const postYear = postedDate.getFullYear();\n    const postTime = `${postedDate.getHours()}`.padStart(2, '0') +':'+ `${postedDate.getMinutes()}`.padStart(2, '0') +':'+ postedDate.getSeconds();\n\n    return `${postMonth} ${postDay}, ${postYear} ${postTime}`;\n}\n\nclass PostList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            senderPostData : [],\n            isPostsAvailable: false,\n            activeSender: '',\n            sortOrder: 'asc',\n            searchSenderString: ''\n        };\n\n        this.changeActiveSender = this.changeActiveSender.bind(this)\n        this.sortPostsByDate = this.sortPostsByDate.bind(this)\n        this.handleSenderSearch = this.handleSenderSearch.bind(this)\n    }\n\n    render(){\n        let { senderPostData } = this.state;\n        let senderSearchText = this.state.searchSenderString.trim().toLowerCase();\n\n\n        if (senderSearchText.length > 0) {\n            senderPostData = this.findSender(senderSearchText);\n        }\n\n        const senderTitle = senderPostData.map((item) => \n          <SenderTabTitle key={item.id} activeSender={this.state.activeSender} onClick={this.changeActiveSender} dataTab={item.id} title={item.tabTitle} dataCount={item.tabPostCount} />\n        )                                        \n        const senderPostContent = senderPostData.map((item) => \n            this.state.activeSender === item.id \n            ? <SenderPostContent key={item.id} onClick={this.sortPostsByDate} dataTab={item.id} dataTabSender={item.tabTitle} content={item.tabContent} />\n            : <SenderPostContent key={item.id} style={{display: 'none'}} dataTabSender={item.tabTitle} dataTab={item.id} content={item.tabContent} />\n        )\n        return(\n          <div className=\"posts\">\n            <ul className=\"sender-title\">\n                <li className=\"sender-head\"><span>SM</span> SuperMail</li>\n                <li className=\"sender-search\"><input type=\"text\" name=\"search-sender\" placeholder=\"Search Sender\" ref=\"searchSender\" onKeyUp={this.handleSenderSearch} /></li>\n                {senderTitle}\n            </ul>\n\n            <div className=\"post-content\">\n                {senderPostContent}\n            </div>\n          </div>\n        )\n    }\n\n    componentDidMount() {\n        if (typeof this.props.location.state !== \"undefined\" && this.state.senderPostData.length === 0) {\n            postService.fetchPosts(this.props.location.state.tokenId)\n            .then((response) => {\n                const { posts } = response;\n                const senderData = this.groupPostsBySenderTitle(posts);\n\n                this.setState({\n                    isPostsAvailable: true,\n                    senderPostData: senderData,\n                    activeSender: senderData.slice(0,1).shift().id\n                });\n\n                this.refs.searchSender.focus();\n            })\n            .catch((error)=> {\n                console.log(error);\n                this.props.history.push('/login')\n            })\n        } else {\n            console.log('Login session expired. Please login again!');\n            this.props.history.push('/login')\n        }\n    }\n\n    groupPostsBySenderTitle(posts) {\n        let sortSenderGroup = {};\n        let senderPostList = [];\n        const senderGroup = posts.reduce((accumulator, currentValue) => {\n              let key = currentValue.from_name;\n              accumulator[key] = accumulator[key] || [];\n              accumulator[key].push(currentValue);\n              return accumulator;\n            }, {});\n\n        Object.keys(senderGroup).sort().forEach(function(key) {\n            sortSenderGroup[key] = senderGroup[key];\n        });\n\n        senderPostList = this.transformSenderData(sortSenderGroup);\n\n        return senderPostList;\n    }\n\n    transformSenderData(senderGroup) {\n        let formattedPostGroup = [];\n        if (senderGroup) {\n            for (const [, postContent] of Object.entries(senderGroup)) {\n                let tabItemObj = {};\n                const fromName = postContent.map((i)=>i.from_name);\n                const senderName = fromName.filter((item, index) => { return fromName.indexOf(item) === index });\n                const userId = postContent.map((o)=>o.from_id);\n                const uid = userId.filter((item, index) => { return userId.indexOf(item) === index });\n\n                tabItemObj = {\n                    id : uid.toString(),\n                    tabTitle: senderName.toString(),\n                    tabContent: postContent,\n                    tabPostCount: postContent.length\n                };\n    \n                formattedPostGroup.push(tabItemObj);\n            }\n        }\n\n        return formattedPostGroup;\n    }\n\n    changeActiveSender(e){\n        this.setState({activeSender: e.target.getAttribute(\"data-tab\")})\n    }\n\n    sortPostsByDate() {\n        let sortByOrder = 'asc';\n        const { activeSender, senderPostData, sortOrder } = this.state;\n        senderPostData.filter((list) => list.id === activeSender).map((group) => {\n            if (sortOrder === 'asc') {\n                sortByOrder = 'desc';\n                return group.tabContent.sort((a, b) => new Date(a.created_time) - new Date(b.created_time))\n            }\n\n            return group.tabContent.sort((a, b) => new Date(b.created_time) - new Date(a.created_time))\n        });\n\n        this.setState({\n            senderPostData: senderPostData,\n            sortOrder: sortByOrder\n        });\n    }\n\n    handleSenderSearch() {\n        this.setState({\n            searchSenderString: this.refs.searchSender.value\n        });\n    }\n\n    findSender(searchText) {\n        let filtersenderPostData = {};\n        const { senderPostData } = this.state;\n\n        if (searchText) {\n            filtersenderPostData = senderPostData.filter((sender) => {\n                return sender.tabTitle.toLowerCase().match(searchText);\n            });\n\n            return filtersenderPostData;\n        }\n\n        return senderPostData;\n    }\n}\n\nexport default PostList","import React from 'react'\nimport './notfound.css'\n\nconst Notfound = () => <h1>Sorry, The requested page is not found</h1>\n\nexport default Notfound","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport './index.css';\nimport Login from './components/Login';\nimport PostList from './components/PostList';\nimport Notfound from './notfound';\n\n\nconst routing = (\n  <Router>\n    <div className=\"postApp\">\n      <Switch>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/posts\" component={PostList} />\n        <Route path=\"/posts/:id\" component={PostList} />\n        <Route component={Notfound} />\n      </Switch>\n    </div>\n  </Router>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}